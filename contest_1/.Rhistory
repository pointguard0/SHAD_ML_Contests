plot[k] <- f(x)
k <- k + 1
}
plot(X, plot, type = 'l')
# simulations of SmA procedure along with its Bootstrap counterpart
n <- 1000 # number of observations
M <- 37 # maximal model
m_dag <- 20
x <- 2
beta <- 1
# sampling uniform desing function on [0, 1] using Fourier infinte basis
# NB! may take non-polynomial function and approximate it with polynom!
# e.g. trigonometric functions
# true model has 200 degrees
# set.seed(16092016)
first_c <- rnorm(10, 0, 1) # suppose sigma = 1
last_c <- numeric()
for (i in 1:190) {
last_c[i] <- rnorm(1, 0, 1) / i^2
}
c <- numeric()
for (i in 1:200) {
if (i < 11) {
c[i] <- first_c[i]
}  else {
c[i] <- last_c[i - 10]
}
}
f <- function(x) {
degree <- c(0:199)
phi <- x^i
return(sum(c * phi))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f(x)
k <- k + 1
}
plot(X, plot, type = 'l')
# simulations of SmA procedure along with its Bootstrap counterpart
n <- 1000 # number of observations
M <- 37 # maximal model
m_dag <- 20
x <- 2
beta <- 1
# sampling uniform desing function on [0, 1] using Fourier infinte basis
# NB! may take non-polynomial function and approximate it with polynom!
# e.g. trigonometric functions
# true model has 200 degrees
# set.seed(16092016)
first_c <- rnorm(10, 0, 1) # suppose sigma = 1
last_c <- numeric()
for (i in 1:190) {
last_c[i] <- rnorm(1, 0, 1) / i^2
}
c <- numeric()
for (i in 1:200) {
if (i < 11) {
c[i] <- first_c[i]
}  else {
c[i] <- last_c[i - 10]
}
}
f <- function(x) {
degree <- c(0:199)
phi <- x^i
return(sum(c * phi))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f(x)
k <- k + 1
}
plot(X, plot, type = 'l')
# simulations of SmA procedure along with its Bootstrap counterpart
n <- 1000 # number of observations
M <- 37 # maximal model
m_dag <- 20
x <- 2
beta <- 1
# sampling uniform desing function on [0, 1] using Fourier infinte basis
# NB! may take non-polynomial function and approximate it with polynom!
# e.g. trigonometric functions
# true model has 200 degrees
# set.seed(16092016)
first_c <- rnorm(10, 0, 1) # suppose sigma = 1
last_c <- numeric()
for (i in 1:190) {
last_c[i] <- rnorm(1, 0, 1) / i^2
}
c <- numeric()
for (i in 1:200) {
if (i < 11) {
c[i] <- first_c[i]
}  else {
c[i] <- last_c[i - 10]
}
}
f <- function(x) {
degree <- c(0:199)
phi <- x^i
return(sum(c * phi))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * 10 * pi * sin(x))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x)/x)
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x)/(1 + log(x))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x)/(1 + 2*log(x))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x) * x)
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f_1 <- function(x) {
return(sqrt(2) * sin(10 * pi * x))
}
X <- seq(0, 1, by = 0.01010101)
k <- 1
plot <- numeric()
for (x in X) {
plot[k] <- f_1(x)
k <- k + 1
}
plot(X, plot, type = 'l')
f(X)
X
f_1(X)
observed <- f_1(X) + rnorm(100, 0, 1)
plot(observed, type = 'p')
plot(observed, type = 'p', lwd = 2)
plot(observed, type = 'p', lwd = .2)
plot(observed, type = 'p', lwd = .2, pch = 1)
plot(observed, type = 'p', lwd = .2, pch = 15)
plot(observed, type = 'p', lwd = .2, pch = 15, lty = 2)
plot(observed, type = 'p', lwd = .2, pch = 13, lty = 2)
plot(observed, type = 'p', lwd = .2, pch = 13, lty = 4)
plot(observed, type = 'p', lwd = .2, pch = 13, lty = 5)
plot(observed, type = 'p', lwd = .8, pch = 13, lty = 5)
plot(observed, type = 'p', lwd = .8, pch = 13, lty = 4)
plot(X, plot, type = 'l')
points(observed, type = 'p', lwd = .8, pch = 13, lty = 4)
qplot(X, plot, type = 'l')
library(ggplot2)
qplot(X, plot, type = 'l')
plot(X, plot, type = 'l')
observed <- f_1(X) + rnorm(100, 0, 1)
points(observed, type = 'p', lwd = .8, pch = 13, lty = 4)
points(X, observed, type = 'p', lwd = .8, pch = 13, lty = 4)
plot(X, plot, type = 'l', col = 'cyan')
points(X, observed, type = 'p', lwd = .8, pch = 13, lty = 4, col = 'orange')
y <- observed
Phi <- matrix(rnorm(200, 0, sigma), ncol = 1000) # design p * n matrix
sigma <- 1
Phi <- matrix(rnorm(200, 0, sigma), ncol = 1000) # design p * n matrix
View(Phi)
Phi <- matrix(rnorm(200, 0, sigma), nrow = 200, ncol = 1000) # design p * n matrix
View(Phi)
grades_2012 <- c(1, 1, 1, 0, 1, 1)
grades_2013 <- c(1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1)
grades_2014 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1)
grades_2015 <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1)
A_overall <- sum(grades_2012) + sum(grades_2013) +
sum(grades_2014) + sum(grades_2015)
overall <- length(grades_2012) + length(grades_2013) +
length(grades_2014) + length(grades_2015)
overall * .25 > (overall - A_overall)
worst_case <- (overall - 9) * .25 >= (overall - A_overall)
worst_case
grades_2015 <- c(1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1)
grades_2012 <- c(1, 1, 1, 0, 1, 1)
grades_2013 <- c(1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1)
grades_2014 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1)
grades_2015 <- c(1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1)
A_overall <- sum(grades_2012) + sum(grades_2013) +
sum(grades_2014) + sum(grades_2015)
overall <- length(grades_2012) + length(grades_2013) +
length(grades_2014) + length(grades_2015)
overall * .25 > (overall - A_overall)
worst_case <- (overall - 9) * .25 >= (overall - A_overall)
worst_case
grades_2012 <- c(1, 1, 1, 0, 1, 1)
grades_2013 <- c(1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1)
grades_2014 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1)
grades_2015 <- c(1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0)
A_overall <- sum(grades_2012) + sum(grades_2013) +
sum(grades_2014) + sum(grades_2015)
overall <- length(grades_2012) + length(grades_2013) +
length(grades_2014) + length(grades_2015)
overall * .25 > (overall - A_overall)
worst_case <- (overall - 9) * .25 >= (overall - A_overall)
worst_case
S <- function(m) {
return (head(Phi, m))
}
S(10)
View(S(10))
first_rows <- function(m) {
return (head(Phi, m))
}
S <- function(m) {
phi_m <- first_rows(m)
return (solve(phi_m %*% t(phi_m)) %*% phi_m)
}
View(S(10))
S(10)
Phi <- matrix(rnorm(200, 10, 7 * sigma), nrow = 200, ncol = 1000) # design p * n matrix
sigma <- 1
Phi <- matrix(rnorm(200, 10, 7 * sigma), nrow = 200, ncol = 1000) # design p * n matrix
S(10)
sigma <- 1
Phi <- matrix(rnorm(200, 10, 7 * sigma), nrow = 200, ncol = 1000) # design p * n matrix
first_rows <- function(m) {
return (head(Phi, m))
}
S <- function(m) {
phi_m <- first_rows(m)
print(phi_m %*% t(phi_m))
return (solve(phi_m %*% t(phi_m)) %*% phi_m)
}
S
S(10)
S <- function(m) {
phi_m <- first_rows(m)
View(phi_m %*% t(phi_m))
return (solve(phi_m %*% t(phi_m)) %*% phi_m)
}
S(10)
library(MASS)
S <- function(m) {
phi_m <- first_rows(m)
View(phi_m %*% t(phi_m))
return (inv(phi_m %*% t(phi_m)) %*% phi_m)
}
S(10)
library(MASS)
S <- function(m) {
phi_m <- first_rows(m)
View(phi_m %*% t(phi_m))
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
S(10)
Pi <- function(m) {
phi_m <- first_rows(m)
return (phi_m %*% S(m))
}
Pi(10)
S <- function(m) {
phi_m <- first_rows(m)
View(phi_m %*% t(phi_m))
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (phi_m %*% S_m)
}
Pi(10)
S <- function(m) {
phi_m <- first_rows(m)
View(phi_m %*% t(phi_m))
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
Pi(10)
View(Pi(10))
View(Pi(10) - Pi(8))
library(MASS)
S <- function(m) {
phi_m <- first_rows(m)
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
View(Pi(10) - Pi(8))
sigma <- 1
Phi <- matrix(rnorm(200, 10, 10 * sigma), nrow = 200, ncol = 1000) # design p * n matrix
first_rows <- function(m) {
return (head(Phi, m))
}
library(MASS)
S <- function(m) {
phi_m <- first_rows(m)
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
View(Pi(10) - Pi(8))
sigma <- 1
Phi <- matrix(rnorm(200, 10, 10 * sigma), nrow = 200, ncol = 1000) # design p * n matrix
first_rows <- function(m) {
return (head(Phi, m))
}
library(MASS)
S <- function(m) {
phi_m <- first_rows(m)
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
View(Pi(4) - Pi(2))
T_stat <- function(m, m0) {
return (1/ sigma^2 * norm_vec((Pi(m) - Pi(m0)) %*% y))
}
T_stat(3, 5)
norm_vec <- function(x) sqrt(sum(x^2))
T_stat <- function(m, m0) {
return (1/ sigma^2 * norm_vec((Pi(m) - Pi(m0)) %*% y))
}
T_stat(3, 5)
size(y)
dim(y)
y <- observed
dim(y)
y
26 * 7 - 64
26 * 7 - 65
117 / 3
77 * 4 - 108* 2 + 32
124 / 15
108 - 32 - 77
2 / 15
install.packages("mlmrev")
install.packages("mlmRev")
library(mlmRev)
glm(formula = use ~ age + I(age^2) + urban + livch, family = binomial,
data = Contraception)
View(Contraception)
plot(age, livch, labels = urban)
df <- Contraception
plot(df$age, df$livch, labels = df$urban)
plot(df$age, df$livch)
plot(df$age, df$livch)
plot(df$age, df$livch)
plot(df$age, df$livch, type = 'l')
plot(df$age, df$livch, type = 'p', lw = 1)
plot(df$age, df$livch, type = 'p', lw = 1)
plot(df$age, df$livch, type = 'p', lwd = 1)
?uniform
?distributions
?runif
Phi <- matrix(runif(3, 15), nrow = 200, ncol = 1000) # design p * n matrix
Phi <- matrix(runif(3, 15), nrow = 200, ncol = 1000) # design p * n matrix
Phi <- matrix(runif(200, 3, 15), nrow = 200, ncol = 1000) # design p * n matrix
norm_vec <- function(x) sqrt(sum(x^2))
first_rows <- function(m) {
return (head(Phi, m))
}
S <- function(m) {
phi_m <- first_rows(m)
return (ginv(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
T_stat <- function(m, m0) {
return (1/ sigma^2 * norm_vec((Pi(m) - Pi(m0)) %*% y))
}
T_stat(3, 5)
S <- function(m) {
phi_m <- first_rows(m)
return (solve(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
T_stat <- function(m, m0) {
return (1/ sigma^2 * norm_vec((Pi(m) - Pi(m0)) %*% y))
}
S <- function(m) {
phi_m <- first_rows(m)
return (solve(phi_m %*% t(phi_m)) %*% phi_m)
}
Pi <- function(m) {
phi_m <- first_rows(m)
S_m <- S(m)
return (t(phi_m) %*% S_m)
}
View(Pi(4) - Pi(2))
T_stat <- function(m, m0) {
return (1/ sigma^2 * norm_vec((Pi(m) - Pi(m0)) %*% y))
}
T_stat(3, 5)
1/(1 + exp(.8))
exp(.8)/(1 + exp(.8))^2
.7/3
3 / sqrt(.09)
qnorm(0)
pnorm(0)
pnorm(10)
qnorm(.975)
qt(.975, 500)
qt(.975, 5)
qt(.975, 1)
qt(.975, 2)
qt(.975, 3)
qt(.975, 4)
342 / 549
342 / (342 + 549)
quit()
setwd("~/Desktop/LOL/NoRussianLetters/2 Semester/Machine Learning/Yandex Version/contest_1")
x_train <- read.csv('X.train.csv')
View(x_train)
x_test <- read.csv('X.test.csv')
x_train <- read.csv('X.train.csv')
train <- read.csv('R.X_train.csv')
train <- read.csv('R.X_train.csv')
View(train)
train <- read.csv('R.X_train.csv', sep = ' ')
View(train)
train <- read.csv('R.X_train.csv', sep = ' ')
View(train)
train <- read.csv('R.X_train.csv')
train <- read.csv('R.X_train.csv')
900 * 216
6299 * 2
plot(CUSUM[950:1200], type = 'l', col = 'green', main = "Signal 1")
plot(CUSUM, type = 'l', col = 'green', main = "Signal 1")
sig1 <- read.csv("sig1.txt")
sig2 <- read.csv("sig2.txt")
par(mfrow = c(1, 2))
plot(sig1$X, col = 'blue', type = 'l')
plot(sig2$X, col = 'green', type = 'l')
lines(formula = c(1125, 0))
